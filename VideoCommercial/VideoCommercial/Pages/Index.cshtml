@page
@model IndexModel
@{

    string[] videos = (string[])ViewData["vids"];
    string location = (string)ViewData["location"];
}
<div id="video-player" class="fullscreen-bg">
    <video class="fullscreen-bg__video" autoplay="" muted="">
        @for (int i = 0; i < videos.Length; i++)
        {

            <source src="@videos[i].ToString()" type="video/mp4">
        }
    </video>
    <div class="fullscreen-bg__playlist">
        @for (int i = 0; i < videos.Length; i++)
        {
            <a href="@videos[i].ToString()"></a>
        }
    </div>
</div>
<script>
    (function () {
        /* Variables */
        var videoPlayer = document.getElementById('video-player'),
            video = videoPlayer.getElementsByClassName('fullscreen-bg__video')[0],
            playlist = videoPlayer.getElementsByClassName('fullscreen-bg__playlist')[0],
            source = video.getElementsByTagName('source'),
            linkList = [],
            videoDirectory = '@location',
            currentVideo = 0,
            allLinks = playlist.children,
            linkNumber = allLinks.length,
            i, filename;

        var requestFullscreen = function () {
            if (video.requestFullscreen) {
                video.requestFullscreen();
            } else if (video.webkitRequestFullscreen) {
                video.webkitRequestFullscreen();
            } else if (video.mozRequestFullScreen) {
                video.mozRequestFullScreen();
            } else if (video.msRequestFullscreen) {
                video.msRequestFullscreen();
            } else {
                console.log('Fullscreen API is not supported.');
            }
        };

        /**
         * Load and play video
         * param  int index Video index
         **/
        function playVideo(index) {
            allLinks[index].classList.add('current-video');
            currentVideo = index;

            //source[2].src = videoDirectory + linkList[index] + '.ogv';
            //source[1].src = videoDirectory + linkList[index] + '.webm';
            source[0].src = videoDirectory + linkList[index] + '.mp4';

            video.load();
            video.play();
        }

        // Save all video sources from playlist
        for (i = 0; i < linkNumber; i++) {
            filename = allLinks[i].href;
            linkList[i] = filename.match(/([^\/]+)(?=\.\w+$)/)[0];
        }

        /**
         * Play next video
         */
        video.addEventListener('ended', function () {
            allLinks[currentVideo].classList.remove('current-video');

            nextVideo = currentVideo + 1;
            if (nextVideo >= linkNumber) {
                nextVideo = 0;
            }

            playVideo(nextVideo);
        });

        video.addEventListener('click', function (e) {
            e.preventDefault();
            requestFullscreen();
        });

    }());
</script>